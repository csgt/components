<?php

namespace {{namespace}}Http\Controllers\Catalogos;

use Illuminate\Http\Request;

use Csgt\Crud\CrudController;
use Cancerbero;
use Crypt;
use DB;
use Exception;
use Auth;
use {{namespace}}Models\Cancerbero\Authrol;
use {{namespace}}Models\Cancerbero\Authrolmodulopermiso;

class RolesController extends CrudController
{
    public function __construct()
    {
        $this->setModelo(new Authrol);
        $this->setTitulo('Roles');

        $this->setCampo(['nombre' =>'Nombre', 'campo' => 'nombre']);
        $this->setCampo(['nombre' =>'Descripción', 'campo' => 'descripcion']);

        $this->middleware(function ($request, $next) {
            $this->setWhere('usuarioid', Auth::id());
            return $next($request);
        });

        if (!Cancerbero::isGod()) {
            $this->setWhere('rolid', '<>', Cancerbero::getGodRol());
        }

        $this->setPermisos("\Cancerbero::tienePermisosCrud", 'catalogos.roles');
    }

    public function create(Request $request)
    {
        return $this->edit($request, 0);
    }

    public function edit(Request $request, $id)
    {
        if ($id !== 0) {
            try {
                $id = Crypt::decrypt($id);
            } catch (Exception $e) {
                abort(501, 'ID inválido');
            }
        }

        $modulopermisosarray = [];
        $modulopermisos = DB::table(config('csgtcancerbero.modulopermisos.tabla').' AS modulopermisos')
            ->select(
                config('csgtcancerbero.modulopermisos.id'),
                'modulos.'.config('csgtcancerbero.modulos.id'),
                'modulos.'.config('csgtcancerbero.modulos.nombrefriendly') . ' AS modulo',
                'modulos.'.config('csgtcancerbero.modulos.nombre') . ' AS ruta',
                'permisos.'.config('csgtcancerbero.permisos.nombrefriendly') . ' AS permisodesc',
                'permisos.'.config('csgtcancerbero.permisos.nombre') . ' AS permiso'
                )
            ->leftJoin(config('csgtcancerbero.modulos.tabla').' AS modulos', 'modulopermisos.'.config('csgtcancerbero.modulopermisos.moduloid'), '=', 'modulos.'.config('csgtcancerbero.modulos.id'))
            ->leftJoin(config('csgtcancerbero.permisos.tabla').' AS permisos', 'modulopermisos.'.config('csgtcancerbero.modulopermisos.permisoid'), '=', 'permisos.'.config('csgtcancerbero.permisos.id'))
            ->orderBy('modulo')
            ->orderBy('permiso')
            ->get();

        $moduloatual = '';
        $i = 0;
        foreach ($modulopermisos as $mp) {
            if ($mp->modulo <> $moduloatual) {
                $i = 0;
            }
            $modulopermisosarray[$mp->modulo]['moduloid']               = $mp->moduloid;
            $modulopermisosarray[$mp->modulo]['ruta']                   = $mp->ruta;
            $modulopermisosarray[$mp->modulo]['permisos'][$i]['id']     = $mp->modulopermisoid;
            $modulopermisosarray[$mp->modulo]['permisos'][$i]['nombre'] = $mp->permisodesc;
            $modulopermisosarray[$mp->modulo]['permisos'][$i]['ruta']   = $mp->permiso;
            $moduloatual                                                = $mp->modulo;
            $i++;
        }

        $rolmodulopermisosarray = [];

        if ($id !== 0) {
            $rolmodulopermisos = DB::table(config('csgtcancerbero.rolmodulopermisos.tabla') . ' AS rmp')
                ->leftJoin(config('csgtcancerbero.roles.tabla') . ' AS roles', 'roles.rolid', '=', 'rmp.rolid')
                ->select(
                    'rmp.' . config('csgtcancerbero.rolmodulopermisos.modulopermisoid').' AS modulopermiso',
                        'roles.' . config('csgtcancerbero.roles.nombre') . ' AS rol'
                )
                ->where('rmp.' . config('csgtcancerbero.rolmodulopermisos.rolid'), $id)
                ->get();
            $nombrerol = DB::table(config('csgtcancerbero.roles.tabla'))
                ->where('rolid', $id)
                ->first()
                ->{config('csgtcancerbero.roles.nombre')};

            foreach ($rolmodulopermisos as $rmp) {
                $rolmodulopermisosarray[] = $rmp->modulopermiso;
            }
        } else {
            $nombrerol = 'Nuevo';
        }

        $breadcrumb = '<ol class="breadcrumb">
        	<li>Catálogos</li>
            <li><a href="/catalogos/roles">Roles</a></li>
            <li class="active">' . $nombrerol . '</li>
        </ol>';

        $rolModelo = Authrol::find($id);

        return view('catalogos.roles.edit')
            ->with('data', $rolModelo)
            ->with('titulo', 'Roles')
            ->with('breadcrumb', $breadcrumb)
            ->with('template', config('csgtcancerbero.template', 'layouts.app'))
            ->with('rolid', ($id==0?0:Crypt::encrypt($id)))
            ->with('modulopermisos', $modulopermisosarray)
            ->with('rolmodulopermisos', $rolmodulopermisosarray);
    }

    public function store(Request $request)
    {
        return $this->update($request, 0);
    }

    public function update(Request $request, $id)
    {
        if ($id !== 0) {
            $rolid = Crypt::decrypt($request->id);
            $rol = Authrol::find($rolid);
            $rol->nombre      = $request->nombre;
            $rol->descripcion = $request->descripcion;
            $rol->save();
            Authrolmodulopermiso::where('rolid', $rolid)->delete();
        } else {
            $rol = new Authrol;
            $rol->nombre      = $request->nombre;
            $rol->descripcion = $request->descripcion;
            $rol->save();
            $rolid = $rol->rolid;
        }

        $modulopermisos = $request->modulopermisos;

        if ($modulopermisos) {
            foreach ($modulopermisos as $modulopermiso) {
                $authmodulopermiso = new Authrolmodulopermiso;
                $authmodulopermiso->rolid = $rolid;
                $authmodulopermiso->modulopermisoid = $modulopermiso;
                $authmodulopermiso->save();
            }
        }

        return redirect()->route('catalogos.roles.index')
            ->with('flashMessage', config('cancerbero::mensajerolmodulopermisoexitoso'))
            ->with('flashType', 'success');
    }
}
